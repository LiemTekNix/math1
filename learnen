<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Find the Hidden Word</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f0f8ff;
      text-align: center;
      padding: 20px;
    }
    h1 {
      color: #333;
    }
    #game-board {
      display: grid;
      grid-template-columns: repeat(4, 100px);
      gap: 10px;
      justify-content: center;
      margin-top: 20px;
    }
    .card {
      width: 100px;
      height: 100px;
      background-color: #fff;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 12px;
      border: 2px solid #ccc;
      flex-direction: column;
    }
    .card svg {
      width: 50px;
      height: 50px;
    }
    .label {
      font-size: 12px;
      margin-top: 4px;
    }
    #target-word {
      font-size: 24px;
      margin-top: 10px;
      color: #0066cc;
    }
    #enlarged-img {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: white;
      border: 4px solid #0066cc;
      border-radius: 12px;
      padding: 20px;
      z-index: 999;
    }
    #enlarged-img svg {
      width: 200px;
      height: 200px;
    }
    #start-btn {
      padding: 10px 20px;
      font-size: 18px;
      margin: 10px;
      cursor: pointer;
    }
    #feedback {
      font-size: 20px;
      font-weight: bold;
      margin-top: 10px;
      color: green;
    }
    #feedback.wrong {
      color: red;
    }
  </style>
</head>
<body>

  <h1>üéÆ Find the Hidden Word!</h1>
  <button id="start-btn">‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu</button>
  <p id="instruction" style="display:none;">Click on the correct picture for: <strong id="target-word">apple</strong></p>

  <div id="game-board"></div>
  <div id="feedback"></div>

  <div id="enlarged-img"></div>

  <audio id="correct-sound" src="https://cdn.pixabay.com/audio/2022/03/15/audio_dcc88b449e.mp3"></audio>
  <audio id="wrong-sound" src="https://cdn.pixabay.com/audio/2022/03/08/audio_76906b1fa6.mp3"></audio>

  <script>
   const wordData = {
      "apple": { vi: "T√°o", svg: `<svg viewBox='0 0 64 64'><circle cx='32' cy='32' r='28' fill='red' /><rect x='28' y='10' width='8' height='16' fill='brown' /></svg>` },
      "banana": { vi: "Chu·ªëi", svg: `<svg viewBox='0 0 64 64'><path d='M12 20 C20 50, 50 50, 52 28' stroke='gold' stroke-width='10' fill='none' /></svg>` },
      "orange": { vi: "Cam", svg: `<svg viewBox='0 0 64 64'><circle cx='32' cy='32' r='28' fill='orange' /></svg>` },
      "grape": { vi: "Nho", svg: `<svg viewBox='0 0 64 64'><circle cx='32' cy='32' r='12' fill='purple' /><circle cx='22' cy='28' r='8' fill='purple' /><circle cx='42' cy='28' r='8' fill='purple' /></svg>` },
      "dog": { vi: "Ch√≥", svg: `<svg viewBox='0 0 64 64'><circle cx='32' cy='32' r='24' fill='saddlebrown' /><circle cx='24' cy='24' r='6' fill='white'/><circle cx='40' cy='24' r='6' fill='white'/></svg>` },
      "cat": { vi: "M√®o", svg: `<svg viewBox='0 0 64 64'><circle cx='32' cy='32' r='24' fill='gray' /><polygon points='16,16 24,8 32,16' fill='gray'/><polygon points='48,16 40,8 32,16' fill='gray'/></svg>` },
      "elephant": { vi: "Voi", svg: `<svg viewBox='0 0 64 64'><ellipse cx='32' cy='40' rx='24' ry='20' fill='gray' /><rect x='28' y='20' width='8' height='20' fill='gray' /></svg>` },
      "lion": { vi: "S∆∞ t·ª≠", svg: `<svg viewBox='0 0 64 64'><circle cx='32' cy='32' r='20' fill='gold' /><circle cx='32' cy='32' r='14' fill='orange' /></svg>` },
      "car": { vi: "Xe h∆°i", svg: `<svg viewBox='0 0 64 64'><rect x='12' y='24' width='40' height='20' fill='blue' /><circle cx='20' cy='48' r='6' fill='black' /><circle cx='44' cy='48' r='6' fill='black' /></svg>` },
      "bike": { vi: "Xe ƒë·∫°p", svg: `<svg viewBox='0 0 64 64'><circle cx='20' cy='44' r='8' stroke='black' stroke-width='2' fill='none'/><circle cx='44' cy='44' r='8' stroke='black' stroke-width='2' fill='none'/><line x1='20' y1='44' x2='32' y2='24' stroke='black' stroke-width='2'/></svg>` },
      "bus": { vi: "Xe bu√Ωt", svg: `<svg viewBox='0 0 64 64'><rect x='12' y='20' width='40' height='24' fill='yellow' /><circle cx='20' cy='48' r='4' fill='black' /><circle cx='44' cy='48' r='4' fill='black' /></svg>` },
      "train": { vi: "T√†u h·ªèa", svg: `<svg viewBox='0 0 64 64'><rect x='10' y='24' width='44' height='20' fill='gray' /><circle cx='18' cy='48' r='4' fill='black' /><circle cx='46' cy='48' r='4' fill='black' /></svg>` },
      "red": { vi: "ƒê·ªè", svg: `<svg viewBox='0 0 64 64'><rect x='10' y='10' width='44' height='44' fill='red' /></svg>` },
      "blue": { vi: "Xanh d∆∞∆°ng", svg: `<svg viewBox='0 0 64 64'><rect x='10' y='10' width='44' height='44' fill='blue' /></svg>` },
      "yellow": { vi: "V√†ng", svg: `<svg viewBox='0 0 64 64'><rect x='10' y='10' width='44' height='44' fill='yellow' /></svg>` },
      "green": { vi: "Xanh l√°", svg: `<svg viewBox='0 0 64 64'><rect x='10' y='10' width='44' height='44' fill='green' /></svg>` },
      "chair": { vi: "Gh·∫ø", svg: `<svg viewBox='0 0 64 64'><rect x='20' y='20' width='24' height='24' fill='sienna' /><rect x='24' y='44' width='4' height='12' fill='sienna' /><rect x='36' y='44' width='4' height='12' fill='sienna' /></svg>` },
      "table": { vi: "B√†n", svg: `<svg viewBox='0 0 64 64'><rect x='10' y='20' width='44' height='12' fill='saddlebrown' /><rect x='14' y='32' width='4' height='16' fill='saddlebrown' /><rect x='46' y='32' width='4' height='16' fill='saddlebrown' /></svg>` },
      "lamp": { vi: "ƒê√®n", svg: `<svg viewBox='0 0 64 64'><polygon points='32,10 20,30 44,30' fill='gold' /><rect x='30' y='30' width='4' height='24' fill='gray' /></svg>` },
      "bed": { vi: "Gi∆∞·ªùng", svg: `<svg viewBox='0 0 64 64'><rect x='10' y='30' width='44' height='20' fill='lightblue' /><rect x='10' y='20' width='44' height='10' fill='skyblue' /></svg>` }
    };


    const keys = Object.keys(wordData);
    const startBtn = document.getElementById("start-btn");
    const gameBoard = document.getElementById("game-board");
    const targetWordEl = document.getElementById("target-word");
    const instruction = document.getElementById("instruction");
    const feedback = document.getElementById("feedback");
    const enlargedImg = document.getElementById("enlarged-img");
    const correctSound = document.getElementById("correct-sound");
    const wrongSound = document.getElementById("wrong-sound");

    let currentTarget = "";

    function speak(text, repeat = 1) {
      for (let i = 0; i < repeat; i++) {
        const utter = new SpeechSynthesisUtterance(text);
        utter.lang = 'en-US';
        speechSynthesis.speak(utter);
      }
    }

    function nextRound() {
      feedback.textContent = "";
      enlargedImg.style.display = "none";
      gameBoard.innerHTML = "";

      const target = keys[Math.floor(Math.random() * keys.length)];
      currentTarget = target;
      targetWordEl.innerHTML = `${target} - ${wordData[target].vi}`;
      speak(target);

      const options = new Set([target]);
      while (options.size < 4) {
        const rand = keys[Math.floor(Math.random() * keys.length)];
        options.add(rand);
      }

      const shuffled = [...options].sort(() => Math.random() - 0.5);

      for (let key of shuffled) {
        const div = document.createElement("div");
        div.className = "card";
        div.innerHTML = wordData[key].svg + `<div class='label'>${wordData[key].vi}</div>`;
        div.onclick = () => {
          if (key === currentTarget) {
            feedback.textContent = "‚úÖ Correct!";
            feedback.classList.remove("wrong");
            correctSound.play();
            speak(key, 3);
            enlargedImg.innerHTML = wordData[key].svg;
            enlargedImg.style.display = "block";
            setTimeout(nextRound, 3000);
          } else {
            feedback.textContent = "‚ùå Wrong!";
            feedback.classList.add("wrong");
            wrongSound.play();
          }
        };
        gameBoard.appendChild(div);
      }
    }

    startBtn.onclick = () => {
      startBtn.style.display = "none";
      instruction.style.display = "block";
      nextRound();
    };
  </script>
</body>
</html>
